generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String?
  password       String?
  role           String        @default("operator")
  organizationId String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  videos         Video[]
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  products    Product[]

  @@map("organizations")
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  parentId      String?   // 支持多级类目
  level         Int       @default(1)
  targetMarket  String?   // 目标市场特征
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  products      Product[]
  
  // 人设关系
  personas         Persona[] @relation("PersonaPrimaryCategory") // 主类目（单选，向后兼容）
  personaCategories PersonaCategory[] // 多对多关系
  
  @@index([parentId])
  @@index([level])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id                   String             @id @default(cuid())
  name                 String             @unique
  description          String?
  category             String
  categoryId           String?            // 关联Category表
  subcategory          String?
  sellingPoints        Json?
  skuImages            String?
  targetCountries      String?
  targetAudience       Json?
  source               String             @default("manual")
  sourceUserId         String?
  organizationId       String?
  isUserGenerated      Boolean            @default(false)
  needsReview          Boolean            @default(false)
  lastUserUpdate       DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  painPoints           Json?
  painPointsLastUpdate DateTime?
  painPointsSource     String?
  productMappings      ProductMapping[]
  painPointAnalyses    ProductPainPoint[]
  styles               Style[]
  templates            Template[]
  // 新增视频生成相关字段
  images               String[]           @default([])
  country              String[]           @default([])
  // 证据聚合字段
  sellingPointsTop5    String[]           @default([])
  painPointsTop5       String[]           @default([])
  targetMarkets        String[]           @default([])
  targetAudiences      String[]           @default([])
  evidenceLastUpdate   DateTime?
  metadata             Json?              // { source: catalog|ai|user, lastSyncedAt }
  
  // 人设关系
  personas             Persona[] @relation("PersonaPrimaryProduct") // 主商品（单选，向后兼容）
  personaProducts      PersonaProduct[] // 多对多关系
  
  scripts              Script[]
  videoJobs            VideoJob[]
  analysisCandidates   AnalysisCandidate[]
  evidence             ProductEvidence[]
  organization         Organization?      @relation(fields: [organizationId], references: [id])
  categoryRef          Category?          @relation(fields: [categoryId], references: [id])

  @@index([category])
  @@index([categoryId])
  @@index([createdAt])
  @@index([organizationId])
  @@index([source])
  @@map("products")
}

model Style {
  id                  String     @id @default(cuid())
  name                String
  description         String?
  category            String
  subcategory         String?
  tone                String
  scriptStructure     String?
  visualStyle         String?
  targetAudience      String?
  productId           String?
  templatePerformance Float?
  hookPool            String?
  targetCountries     String?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  product             Product?   @relation(fields: [productId], references: [id])
  templates           Template[]

  @@map("styles")
}

model Template {
  id                    String             @id @default(cuid())
  templateId            String             @unique
  name                  String
  description           String?
  productId             String
  styleId               String?
  structure             String
  hookPool              String
  videoStylePool        String
  tonePool              String
  suggestedLength       String
  recommendedCategories String
  targetCountries       String
  templatePrompt        String
  source                String             @default("manual")
  sourceVideoId         String?
  sourceUserId          String?
  isUserGenerated       Boolean            @default(false)
  needsReview           Boolean            @default(false)
  videoAnalysisAI       String?
  promptGenerationAI    String?
  videoGenerationAI     String?
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  templateAnalyses      TemplateAnalysis[]
  product               Product            @relation(fields: [productId], references: [id])
  style                 Style?             @relation(fields: [styleId], references: [id])
  videos                Video[]

  @@map("templates")
}

model Video {
  id                 String   @id @default(cuid())
  templateId         String
  userId             String
  videoUrl           String?
  videoTitle         String?
  videoDescription   String?
  generatedPrompt    String?
  promptGenerationAI String?
  videoGenerationAI  String?
  status             String   @default("generated")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  adData             AdData[]
  template           Template @relation(fields: [templateId], references: [id])
  user               User     @relation(fields: [userId], references: [id])

  @@map("videos")
}

model AdData {
  id               String   @id @default(cuid())
  videoId          String
  platform         String
  shopId           String?
  spend            Float?
  impressions      Int?
  clicks           Int?
  views            Int?
  ctr              Float?
  ctr3s            Float?
  ctrComplete      Float?
  conversions      Int?
  cvr              Float?
  gmv              Float?
  orders           Int?
  likes            Int?
  shares           Int?
  comments         Int?
  userDemographics String?
  date             DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  video            Video    @relation(fields: [videoId], references: [id])

  @@map("ad_data")
}

model TemplateAnalysis {
  id         String   @id @default(cuid())
  templateId String
  videoId    String?
  analysis   String
  score      Float
  createdAt  DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id])

  @@map("template_analyses")
}

model CompetitorAnalysis {
  id             String    @id @default(cuid())
  url            String    @unique
  platform       String
  title          String?
  description    String?
  thumbnail      String?
  duration       Int?
  views          Int?
  likes          Int?
  comments       Int?
  shares         Int?
  uploadDate     DateTime?
  script         String?
  keyPoints      String?
  callToAction   String?
  hashtags       String?
  mentions       String?
  productName    String?
  sellingPoints  String?
  marketingInfo  String?
  targetAudience String?
  price          Float?
  currency       String?
  discount       String?
  videoQuality   Float?
  audioQuality   Float?
  editingStyle   String?
  colorGrading   String?
  transitions    String?
  aiAnalysis     String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("competitor_analyses")
}

model ReferenceVideo {
  id               String    @id @default(cuid())
  name             String
  type             String
  source           String
  thumbnail        String?
  duration         Int?
  size             Int?
  format           String?
  analysis         String?
  uploadedAt       DateTime  @default(now())
  uploadedBy       String
  tags             String?
  category         String
  description      String?
  timesUsed        Int       @default(0)
  lastUsed         DateTime?
  performanceScore Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("reference_videos")
}

model VideoAnalysis {
  id               String   @id @default(cuid())
  videoId          String?
  referenceVideoId String?
  competitorId     String?
  duration         Int
  width            Int
  height           Int
  fps              Int
  bitrate          Int
  format           String
  size             Int
  resolution       String
  clarity          Float
  stability        Float
  colorAccuracy    Float
  scenes           String?
  objects          String?
  text             String?
  audio            String?
  aiAnalysis       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("video_analyses")
}

model RankingResult {
  id             String   @id @default(cuid())
  sessionId      String
  algorithm      String
  candidates     String
  totalCount     Int
  processingTime Int
  context        String?
  userProfile    String?
  createdAt      DateTime @default(now())

  @@map("ranking_results")
}

model ProductMapping {
  id                String    @id @default(cuid())
  productId         String
  platform          String
  platformProductId String
  platformName      String
  confidence        Float
  status            String    @default("pending")
  suggestedBy       String    @default("ai")
  createdAt         DateTime  @default(now())
  confirmedAt       DateTime?
  confirmedBy       String?
  product           Product   @relation(fields: [productId], references: [id])

  @@map("product_mappings")
}

model ProductPainPoint {
  id             String           @id @default(cuid())
  productId      String
  platform       String
  productUrl     String?
  productName    String
  painPoints     String
  painCategories String?
  severity       String?
  frequency      Int?
  aiAnalysis     String?
  keywords       String?
  sentiment      String?
  sourceData     String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  comments       ProductComment[]
  product        Product          @relation(fields: [productId], references: [id])

  @@map("product_pain_points")
}

model ProductComment {
  id            String           @id @default(cuid())
  painPointId   String
  platform      String
  commentId     String
  content       String
  rating        Int?
  author        String?
  publishDate   DateTime?
  likes         Int?
  replies       Int?
  sentiment     String?
  keywords      String?
  painPointTags String?
  createdAt     DateTime         @default(now())
  painPoint     ProductPainPoint @relation(fields: [painPointId], references: [id])

  @@map("product_comments")
}

model CommentScrapingTask {
  id          String    @id @default(cuid())
  productId   String
  platform    String
  keywords    String?
  status      String    @default("pending")
  progress    Int       @default(0)
  maxComments Int       @default(100)
  dateRange   String?
  filters     String?
  totalFound  Int?
  scraped     Int?
  errorLog    String?
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  @@map("comment_scraping_tasks")
}

model UserSubmission {
  id            String    @id @default(cuid())
  userId        String
  type          String
  targetId      String?
  data          String
  originalData  String?
  source        String
  sourceVideoId String?
  sourceUrl     String?
  status        String    @default("pending")
  reviewedBy    String?
  reviewedAt    DateTime?
  reviewNotes   String?
  isApplied     Boolean   @default(false)
  appliedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("user_submissions")
}

model PromptTemplate {
  id                 String   @id @default(cuid())
  name               String
  businessModule     String
  content            String
  variables          String?
  description        String?
  performance        Float?
  usageCount         Int      @default(0)
  successRate        Float?
  isActive           Boolean  @default(true)
  isDefault          Boolean  @default(false)
  createdBy          String?
  inputRequirements  String?  // 输入要求
  outputRequirements String?  // 输出要求
  outputRules        String?  // 输出规则
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([businessModule])
  @@map("prompt_templates")
}

model PromptRule {
  id             String   @id @default(cuid())
  businessModule String   @unique  // 每个业务模块唯一
  inputFormat    String            // 输入格式
  outputFormat   String            // 输出格式
  analysisMethod String            // 分析方法
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("prompt_rules")
}

model EstimationModel {
  id               String                @id @default(cuid())
  provider         String
  modelName        String
  version          String?
  langs            String
  maxContext       Int
  pricePer1kTokens Float
  rateLimit        Int?
  toolUseSupport   Boolean               @default(false)
  jsonModeSupport  Boolean               @default(false)
  status           String                @default("active")
  staticCapability String?
  dynamicMetrics   String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  candidates       EstimationCandidate[]

  @@unique([provider, modelName])
  @@index([status])
  @@map("estimation_models")
}

model EntityIndex {
  id          String               @id @default(cuid())
  entityType  String
  nativeTable String
  nativeId    String
  status      String               @default("active")
  tags        String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  embeddings  EntityEmbedding[]
  features    EntityFeature[]
  metrics     EntityMetricsDaily[]

  @@unique([entityType, nativeId])
  @@index([entityType, status])
  @@map("entity_index")
}

model EntityFeature {
  id              String      @id @default(cuid())
  entityIndexId   String
  featureGroup    String
  features        String
  featuresVersion String      @default("v1")
  validAt         DateTime    @default(now())
  createdAt       DateTime    @default(now())
  entityIndex     EntityIndex @relation(fields: [entityIndexId], references: [id], onDelete: Cascade)

  @@index([entityIndexId, featureGroup])
  @@map("entity_features")
}

model EntityEmbedding {
  id            String      @id @default(cuid())
  entityIndexId String
  space         String      @default("default")
  vector        String
  version       String      @default("v1")
  updatedAt     DateTime    @updatedAt
  entityIndex   EntityIndex @relation(fields: [entityIndexId], references: [id], onDelete: Cascade)

  @@unique([entityIndexId, space])
  @@map("entity_embeddings")
}

model EntityMetricsDaily {
  id            String      @id @default(cuid())
  entityIndexId String
  segmentKey    String
  qualityScore  Float?
  editRate      Float?
  rejectionRate Float?
  cost          Float?
  latency       Float?
  sampleCount   Int         @default(0)
  date          DateTime
  createdAt     DateTime    @default(now())
  entityIndex   EntityIndex @relation(fields: [entityIndexId], references: [id], onDelete: Cascade)

  @@unique([entityIndexId, segmentKey, date])
  @@index([segmentKey, date])
  @@map("entity_metrics_daily")
}

model Task {
  id          String    @id @default(cuid())
  type        String    // video_generation, competitor_analysis, etc.
  status      String    @default("pending") // pending, running, succeeded, failed, canceled
  priority    Int       @default(0)
  payload     String?   // JSON string
  result      String?   // JSON string
  error       String?
  progress    Int       @default(0)
  traceId     String?
  dedupeKey   String?   @unique
  ownerId     String?
  workerName  String?
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  metadata    String?   // JSON string
  logs        TaskLog[]

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([scheduledAt])
  @@index([ownerId])
  // 复合索引优化常见查询场景
  @@index([status, createdAt(sort: Desc)])
  @@index([type, createdAt(sort: Desc)])
  @@index([status, type, createdAt(sort: Desc)])
  @@map("tasks")
}

model TaskLog {
  id        String   @id @default(cuid())
  taskId    String
  level     String   // debug, info, warn, error
  message   String
  data      String?  // JSON string
  timestamp DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([timestamp])
  @@map("task_logs")
}

model EstimationCandidateSet {
  id              String                @id @default(cuid())
  taskSnapshot    String
  contextSnapshot String?
  createdAt       DateTime              @default(now())
  candidates      EstimationCandidate[]
  decisions       EstimationDecision[]

  @@index([createdAt])
  @@map("estimation_candidate_sets")
}

model EstimationCandidate {
  id             String                 @id @default(cuid())
  candidateSetId String
  modelId        String
  coarseScore    Float?
  fineScore      Float?
  reason         String?
  filtered       Boolean                @default(false)
  filterReason   String?
  createdAt      DateTime               @default(now())
  candidateSet   EstimationCandidateSet @relation(fields: [candidateSetId], references: [id], onDelete: Cascade)
  model          EstimationModel        @relation(fields: [modelId], references: [id])

  @@index([candidateSetId])
  @@index([modelId])
  @@map("estimation_candidates")
}

model EstimationDecision {
  id              String                    @id @default(cuid())
  candidateSetId  String
  chosenModelId   String
  strategyVersion String                    @default("v1")
  weightsSnapshot String?
  topK            Int                       @default(5)
  exploreFlags    String?
  expectedCost    Float?
  expectedLatency Float?
  requestId       String?                   @unique
  segmentKey      String?
  createdAt       DateTime                  @default(now())
  candidateSet    EstimationCandidateSet    @relation(fields: [candidateSetId], references: [id], onDelete: Cascade)
  feedbackEvents  EstimationFeedbackEvent[]
  outcomes        EstimationOutcome?

  @@index([candidateSetId])
  @@index([chosenModelId])
  @@index([segmentKey, createdAt])
  @@map("estimation_decisions")
}

model EstimationOutcome {
  id           String             @id @default(cuid())
  decisionId   String             @unique
  qualityScore Float?
  editDistance Float?
  rejected     Boolean?
  conversion   Boolean?
  latencyMs    Int?
  costActual   Float?
  tokensInput  Int?
  tokensOutput Int?
  autoEval     String?
  recordedAt   DateTime           @default(now())
  decision     EstimationDecision @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  @@index([decisionId])
  @@map("estimation_outcomes")
}

model EstimationFeedbackEvent {
  id         String             @id @default(cuid())
  decisionId String
  eventType  String
  payload    String
  createdAt  DateTime           @default(now())
  decision   EstimationDecision @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  @@index([decisionId, eventType])
  @@index([createdAt])
  @@map("estimation_feedback_events")
}

model RecommendationCandidateSet {
  id              String                    @id @default(cuid())
  subjectType     String
  subjectId       String?
  subjectSnapshot String
  targetType      String
  contextSnapshot String?
  createdAt       DateTime                  @default(now())
  candidates      RecommendationCandidate[]
  decisions       RecommendationDecision[]

  @@index([createdAt])
  @@map("reco_candidate_sets")
}

model RecommendationCandidate {
  id             String                     @id @default(cuid())
  candidateSetId String
  targetType     String
  targetId       String
  coarseScore    Float?
  fineScore      Float?
  reason         String?
  filtered       Boolean                    @default(false)
  filterReason   String?
  createdAt      DateTime                   @default(now())
  candidateSet   RecommendationCandidateSet @relation(fields: [candidateSetId], references: [id], onDelete: Cascade)

  @@index([candidateSetId])
  @@index([targetType, targetId])
  @@map("reco_candidates")
}

model RecommendationDecision {
  id               String                     @id @default(cuid())
  candidateSetId   String
  chosenTargetType String
  chosenTargetId   String
  strategyVersion  String                     @default("v1")
  weightsSnapshot  String?
  topK             Int                        @default(5)
  exploreFlags     String?
  requestId        String?                    @unique
  segmentKey       String?
  createdAt        DateTime                   @default(now())
  candidateSet     RecommendationCandidateSet @relation(fields: [candidateSetId], references: [id], onDelete: Cascade)
  events           RecommendationEvent[]
  outcomes         RecommendationOutcome?

  @@index([candidateSetId])
  @@index([chosenTargetType, chosenTargetId])
  @@index([segmentKey, createdAt])
  @@map("reco_decisions")
}

model RecommendationOutcome {
  id           String                 @id @default(cuid())
  decisionId   String                 @unique
  qualityScore Float?
  editDistance Float?
  rejected     Boolean?
  conversion   Boolean?
  latencyMs    Int?
  costActual   Float?
  notes        String?
  recordedAt   DateTime               @default(now())
  decision     RecommendationDecision @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  @@index([decisionId])
  @@map("reco_outcomes")
}

model RecommendationEvent {
  id         String                 @id @default(cuid())
  decisionId String
  eventType  String
  payload    String?
  createdAt  DateTime               @default(now())
  decision   RecommendationDecision @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  @@index([decisionId, eventType])
  @@index([createdAt])
  @@map("reco_events")
}

model RecommendationSetting {
  id              String   @id @default(cuid())
  scenario        String   @unique
  mode            String   @default("rule")
  mCoarse         Int      @default(10)
  kFine           Int      @default(3)
  epsilon         Float    @default(0.10)
  minExplore      Float    @default(0.05)
  diversity       Boolean  @default(true)
  qualityFloorRej Float    @default(0.20)
  qualityFloorStr Float    @default(0.90)
  costOverrunMul  Float    @default(1.50)
  latencySoftMs   Int      @default(6000)
  latencyHardMs   Int      @default(8000)
  segmentTemplate String   @default("")
  updatedAt       DateTime @updatedAt

  @@map("recommendation_settings")
}

model RecommendationFeedback {
  id                String   @id @default(cuid())
  decisionId        String
  feedbackType      String
  chosenCandidateId String
  reason            String?
  createdAt         DateTime @default(now())

  @@index([decisionId])
  @@index([feedbackType])
  @@index([chosenCandidateId])
  @@index([createdAt])
  @@map("reco_feedback")
}

// 视频生成相关模型
model Persona {
  id                String   @id @default(cuid())
  name              String   @default("未命名人设") // 人设名称
  description       String?  // 人设描述
  
  // 保留单选字段（向后兼容旧数据和脚本生成）
  categoryId        String   @default("default-category") // 主类目ID（兼容旧数据）
  productId         String?  // 主商品ID（兼容旧数据）
  
  textDescription   String?  // 用户输入的文字描述（可选）
  generatedContent  Json     @default("{}") // 生成的人设内容
  aiModel           String   @default("gemini-pro") // 使用的AI模型
  promptTemplate    String   @default("default-template") // 使用的prompt模板
  generationParams  Json?    // 生成参数
  createdBy         String?  // 创建者
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
  // 保留原有字段以兼容现有数据
  version           Int      @default(1)
  coreIdentity      Json?    // { name, age, gender, location, occupation }
  look              Json?    // { generalAppearance, hair, clothingAesthetic, signatureDetails }
  vibe              Json?    // { traits, demeanor, communicationStyle }
  context           Json?    // { hobbies, values, frustrations, homeEnvironment }
  why               String?  // 可信度理由
  modelUsed         Json?    // { provider, model }
  
  // 单选关系（向后兼容）
  product           Product?  @relation("PersonaPrimaryProduct", fields: [productId], references: [id], onDelete: Cascade)
  category          Category  @relation("PersonaPrimaryCategory", fields: [categoryId], references: [id])
  
  // 多对多关系
  personaProducts   PersonaProduct[]  // 人设关联的多个商品
  personaCategories PersonaCategory[] // 人设关联的多个类目
  
  scripts           Script[]

  @@index([categoryId])
  @@index([productId])
  @@index([createdBy])
  @@index([isActive])
  @@map("personas")
}

// 人设-商品 多对多关系表
model PersonaProduct {
  id         String   @id @default(cuid())
  personaId  String
  productId  String
  isPrimary  Boolean  @default(false) // 是否为主商品
  createdAt  DateTime @default(now())
  
  persona    Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([personaId, productId])
  @@index([personaId])
  @@index([productId])
  @@map("persona_products")
}

// 人设-类目 多对多关系表
model PersonaCategory {
  id         String   @id @default(cuid())
  personaId  String
  categoryId String
  isPrimary  Boolean  @default(false) // 是否为主类目
  createdAt  DateTime @default(now())
  
  persona    Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([personaId, categoryId])
  @@index([personaId])
  @@index([categoryId])
  @@map("persona_categories")
}

model Script {
  id            String   @id @default(cuid())
  productId     String
  personaId     String
  version       Int      @default(1)
  angle         String   // 脚本角度
  energy        String   // 能量描述
  durationSec   Int      @default(15)
  lines         Json     // { open, main, close }
  shots         Json     // [second:[0..15), camera, action, visibility, audio]
  technical     Json     // { orientation, filmingMethod, dominantHand, location, audioEnv }
  modelUsed     Json?    // { provider, model }
  evidenceIds   String[] @default([])
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  persona       Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  videoJobs     VideoJob[]

  @@index([productId])
  @@index([personaId])
  @@index([createdBy])
  @@map("scripts")
}

model VideoJob {
  id              String   @id @default(cuid())
  idempotencyKey  String?  @unique
  productId       String
  personaId       String
  scriptId        String
  provider        String   // OpenAI|Pika|Luma|Runway|Custom
  model           String?
  status          String   @default("queued") // queued|running|succeeded|failed|cancelled
  progress        Int      @default(0)
  errorCode       String?
  errorMessage    String?
  params          Json?    // { seconds, size, inputReferenceRef, extras }
  result          Json?    // { fileUrl, thumbnailUrl, providerRaw }
  cost            Json?    // { promptTokens, outputTokens, credits }
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  script          Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
  @@map("video_jobs")
}

model AnalysisCandidate {
  id        String   @id @default(cuid())
  productId String
  content   String
  source    String   // user|ai
  adopted   Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([source])
  @@index([adopted])
  @@map("analysis_candidates")
}

model ProductEvidence {
  id            String    @id @default(cuid())
  productId     String
  platform      String    // tiktok, amazon, meta, etc.
  url           String
  title         String
  description   String?
  images        String[]  @default([])
  targetMarkets String[]  @default([])
  targetAudiences String[] @default([])
  sellingPoints String[]  @default([])
  painPoints    String[]  @default([])
  angles        String[]  @default([])
  evidenceMeta  Json      // {capturedAt, parserVer, source}
  version       Int       @default(1)
  rawPointerId  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  rawPointer    RawPointer? @relation(fields: [rawPointerId], references: [id])

  @@index([productId])
  @@index([platform])
  @@index([createdAt])
  @@map("product_evidence")
}

model RawPointer {
  id           String    @id @default(cuid())
  storageKey   String    @unique
  sha256       String    @unique
  size         Int
  ttlExpireAt  DateTime
  createdAt    DateTime  @default(now())
  evidence     ProductEvidence[]

  @@index([ttlExpireAt])
  @@map("raw_pointers")
}

model ScrapingTask {
  id           String    @id @default(cuid())
  batchId      String
  url          String
  platform     String
  productId    String?
  productName  String?
  status       String    @default("pending") // pending|running|completed|failed
  errorCode    String?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([batchId])
  @@index([status])
  @@index([createdAt])
  @@map("scraping_tasks")
}

model PromptGenerationHistory {
  id                  String   @id @default(cuid())
  productId           String?  // 关联的产品ID
  productName         String   // 产品名称
  productCategory     String?  // 产品类别
  generatedPrompt     String   // 生成的prompt内容
  promptTemplate      Json?    // 使用的prompt模板 { id, title }
  modelUsed           Json?    // 使用的模型 { id, title, provider }
  inputParams         Json?    // 输入参数（产品信息等）
  recommendations     Json?    // 推荐信息
  metadata            Json?    // 元数据（延迟、是否使用推荐等）
  status              String   @default("success") // success|failed
  errorMessage        String?  // 错误信息
  createdBy           String?  // 创建者
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([productId])
  @@index([productName])
  @@index([status])
  @@index([createdAt])
  @@index([createdBy])
  @@map("prompt_generation_history")
}
