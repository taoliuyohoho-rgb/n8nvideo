'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Plus, Edit, Trash2, Package, Palette, BarChart3, RefreshCw, Database, Brain, Upload, Settings, Users, Search, MessageSquare } from 'lucide-react'

interface Product {
  id: string
  name: string
  description: string
  category: string
  subcategory: string
  sellingPoints: string[]
  skuImages: string[]
  targetCountries: string[]
  createdAt: string
}

interface Style {
  id: string
  name: string
  description: string
  category: string
  subcategory: string
  tone: string
  scriptStructure: any
  visualStyle: any
  targetAudience: any
  productId: string
  productName: string
  isActive: boolean
  createdAt: string
}

interface User {
  id: string
  email: string
  name: string
  role: string
  isActive: boolean
  createdAt: string
  _count: {
    videos: number
  }
}

interface PainPoint {
  id: string
  productId: string
  platform: string
  productName: string
  painPoints: string[]
  severity: string
  frequency: number
  sentiment: string
  createdAt: string
  product: {
    id: string
    name: string
    category: string
  }
  _count: {
    comments: number
  }
}


export default function AdminPage() {
  const [activeTab, setActiveTab] = useState('products')
  const [products, setProducts] = useState<Product[]>([])
  const [styles, setStyles] = useState<Style[]>([])
  const [users, setUsers] = useState<User[]>([])
  const [painPoints, setPainPoints] = useState<PainPoint[]>([])
  const [showProductForm, setShowProductForm] = useState(false)
  const [showStyleForm, setShowStyleForm] = useState(false)
  const [showUserForm, setShowUserForm] = useState(false)
  const [showPainPointForm, setShowPainPointForm] = useState(false)
  const [editingProduct, setEditingProduct] = useState<Product | null>(null)
  const [editingStyle, setEditingStyle] = useState<Style | null>(null)
  const [editingUser, setEditingUser] = useState<User | null>(null)
  const [isSyncing, setIsSyncing] = useState(false)
  const [syncResult, setSyncResult] = useState<any>(null)
  const [selectedProduct, setSelectedProduct] = useState<any>(null)
  const [showProductDetail, setShowProductDetail] = useState(false)
  const [showBulkUpload, setShowBulkUpload] = useState(false)
  const [bulkUploadFile, setBulkUploadFile] = useState<File | null>(null)
  const [bulkUploading, setBulkUploading] = useState(false)
  const [showRankingTuning, setShowRankingTuning] = useState(false)
  const [showScrapingModal, setShowScrapingModal] = useState(false)
  const [scrapingConfig, setScrapingConfig] = useState({
    platform: '',
    keywords: '',
    maxComments: 100,
    dateRange: ''
  })
  
  // 调参状态
  const [tuningConfig, setTuningConfig] = useState({
    coarseRanking: {
      relevance: 30,
      quality: 25,
      diversity: 25,
      recency: 20
    },
    fineRanking: {
      userPreference: 30,
      businessValue: 30,
      technicalQuality: 25,
      marketTrend: 15
    }
  })
  
  // 筛选器状态
  const [filters, setFilters] = useState({
    dateRange: '7d',
    product: 'all',
    platform: 'all',
    template: 'all'
  })

  // 数据加载
  useEffect(() => {
    loadProducts()
    loadStyles()
    loadUsers()
    loadPainPoints()
  }, [])

  const loadProducts = async () => {
    // 模拟商品数据
    setProducts([
      {
        id: '1',
        name: '无线蓝牙耳机',
        description: '高品质无线蓝牙耳机，降噪功能强大',
        category: '电子产品',
        subcategory: '音频设备',
        sellingPoints: ['主动降噪技术', '30小时续航', '快速充电', '防水设计'],
        skuImages: ['https://example.com/earphone1.jpg', 'https://example.com/earphone2.jpg'],
        targetCountries: ['US', 'UK', 'DE', 'JP'],
        createdAt: '2024-01-01'
      },
      {
        id: '2',
        name: '智能手表',
        description: '多功能智能手表，健康监测专家',
        category: '电子产品',
        subcategory: '可穿戴设备',
        sellingPoints: ['24小时心率监测', '睡眠质量分析', '运动模式追踪', '防水设计'],
        skuImages: ['https://example.com/watch1.jpg', 'https://example.com/watch2.jpg'],
        targetCountries: ['US', 'CA', 'AU'],
        createdAt: '2024-01-02'
      }
    ])
  }

  const loadStyles = async () => {
    // 模拟风格数据
    setStyles([
      {
        id: '1',
        name: '科技感风格',
        description: '适合电子产品的科技感视频风格',
        category: '电子产品',
        subcategory: '科技',
        tone: 'professional',
        scriptStructure: { opening: '产品特写', middle: '功能演示', ending: '品牌展示' },
        visualStyle: { colorScheme: '蓝色科技风', lighting: '明亮清晰', cameraAngle: '多角度展示' },
        targetAudience: { age: '25-45', gender: 'all', interests: ['科技', '电子产品'] },
        productId: '1',
        productName: '无线蓝牙耳机',
        isActive: true,
        createdAt: '2024-01-01'
      },
      {
        id: '2',
        name: '时尚美妆风格',
        description: '适合美妆护肤产品的时尚风格',
        category: '美妆护肤',
        subcategory: '时尚',
        tone: 'elegant',
        scriptStructure: { opening: '模特展示', middle: '产品使用', ending: '效果对比' },
        visualStyle: { colorScheme: '粉色温柔风', lighting: '柔和自然光', cameraAngle: '特写镜头' },
        targetAudience: { age: '18-35', gender: 'female', interests: ['美妆', '护肤', '时尚'] },
        productId: '2',
        productName: '智能手表',
        isActive: true,
        createdAt: '2024-01-02'
      }
    ])
  }

  const loadUsers = async () => {
    try {
      const response = await fetch('/api/admin/users')
      const result = await response.json()
      if (result.success) {
        setUsers(result.data)
      }
    } catch (error) {
      console.error('加载用户数据失败:', error)
      // 模拟用户数据
      setUsers([
        {
          id: '1',
          email: 'admin@example.com',
          name: '管理员',
          role: 'admin',
          isActive: true,
          createdAt: '2024-01-01',
          _count: { videos: 0 }
        },
        {
          id: '2',
          email: 'user@example.com',
          name: '普通用户',
          role: 'viewer',
          isActive: true,
          createdAt: '2024-01-02',
          _count: { videos: 5 }
        }
      ])
    }
  }

  const loadPainPoints = async () => {
    try {
      const response = await fetch('/api/admin/pain-points')
      const result = await response.json()
      if (result.success) {
        setPainPoints(result.data.painPoints)
      }
    } catch (error) {
      console.error('加载痛点数据失败:', error)
      // 模拟痛点数据
      setPainPoints([
        {
          id: '1',
          productId: '1',
          platform: 'shopee',
          productName: '无线蓝牙耳机',
          painPoints: ['音质不够清晰', '电池续航短', '连接不稳定'],
          severity: 'high',
          frequency: 15,
          sentiment: 'negative',
          createdAt: '2024-01-01',
          product: {
            id: '1',
            name: '无线蓝牙耳机',
            category: '电子产品'
          },
          _count: { comments: 25 }
        },
        {
          id: '2',
          productId: '2',
          platform: 'tiktok',
          productName: '智能手表',
          painPoints: ['表带容易断裂', '屏幕容易刮花', '充电速度慢'],
          severity: 'medium',
          frequency: 8,
          sentiment: 'negative',
          createdAt: '2024-01-02',
          product: {
            id: '2',
            name: '智能手表',
            category: '电子产品'
          },
          _count: { comments: 12 }
        }
      ])
    }
  }

  const loadUserSubmissions = async () => {
    try {
      const response = await fetch('/api/admin/user-submissions')
      const result = await response.json()
      if (result.success) {
        setUserSubmissions(result.data.submissions)
      }
    } catch (error) {
      console.error('加载用户提交数据失败:', error)
      // 模拟用户提交数据
      setUserSubmissions([
        {
          id: '1',
          userId: 'user1',
          type: 'style',
          targetId: null,
          data: JSON.stringify({
            name: '科技感产品展示风格',
            description: '基于用户视频分析生成的科技感风格',
            category: '科技产品',
            subcategory: '电子产品',
            tone: '专业',
            scriptStructure: {
              opening: '产品特写展示',
              middle: '功能演示和使用场景',
              ending: '品牌logo和购买引导'
            },
            visualStyle: {
              colorScheme: '蓝色科技风',
              lighting: '明亮清晰',
              cameraAngle: '多角度展示',
              effects: '科技感特效'
            },
            targetAudience: '25-45岁，科技爱好者'
          }),
          source: 'user_video_analysis',
          sourceVideoId: 'video1',
          sourceUrl: 'https://example.com/video1',
          status: 'pending',
          isApplied: false,
          createdAt: '2024-01-01T10:00:00Z',
          updatedAt: '2024-01-01T10:00:00Z'
        },
        {
          id: '2',
          userId: 'user2',
          type: 'product',
          targetId: '1',
          data: JSON.stringify({
            sellingPoints: ['主动降噪技术', '30小时续航', '快速充电', '防水设计', 'AI智能调音'],
            description: '高品质无线蓝牙耳机，降噪功能强大，支持AI智能调音'
          }),
          originalData: JSON.stringify({
            sellingPoints: ['主动降噪技术', '30小时续航', '快速充电', '防水设计'],
            description: '高品质无线蓝牙耳机，降噪功能强大'
          }),
          source: 'user_analysis',
          sourceVideoId: 'video2',
          status: 'pending',
          isApplied: false,
          createdAt: '2024-01-02T14:30:00Z',
          updatedAt: '2024-01-02T14:30:00Z'
        }
      ])
    }
  }

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product)
    setShowProductForm(true)
  }

  const handleEditStyle = (style: Style) => {
    setEditingStyle(style)
    setShowStyleForm(true)
  }

  const handleDeleteProduct = (id: string) => {
    setProducts(products.filter(p => p.id !== id))
  }

  const handleDeleteStyle = (id: string) => {
    setStyles(styles.filter(s => s.id !== id))
  }

  const handleEditUser = (user: User) => {
    setEditingUser(user)
    setShowUserForm(true)
  }

  const handleReviewSubmission = async (submissionId: string, status: 'approved' | 'rejected', reviewNotes?: string) => {
    try {
      const response = await fetch(`/api/admin/user-submissions/${submissionId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status,
          reviewNotes,
          reviewedBy: 'admin' // 这里应该是当前管理员ID
        })
      })

      const result = await response.json()
      if (result.success) {
        // 更新本地状态
        setUserSubmissions(prev => 
          prev.map(sub => 
            sub.id === submissionId 
              ? { ...sub, status, reviewNotes, reviewedAt: new Date().toISOString() }
              : sub
          )
        )
        setShowSubmissionDetail(false)
        setSelectedSubmission(null)
      }
    } catch (error) {
      console.error('审核提交失败:', error)
    }
  }

  const handleViewSubmission = (submission: UserSubmission) => {
    setSelectedSubmission(submission)
    setShowSubmissionDetail(true)
  }

  const handleDeleteUser = async (id: string) => {
    try {
      const response = await fetch(`/api/admin/users/${id}`, {
        method: 'DELETE'
      })
      const result = await response.json()
      if (result.success) {
        setUsers(users.filter(u => u.id !== id))
        alert('用户删除成功')
      } else {
        alert(`删除失败：${result.error}`)
      }
    } catch (error) {
      console.error('删除用户失败:', error)
      alert('删除用户失败')
    }
  }

  const handleCreateUser = async (userData: any) => {
    try {
      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
      })
      const result = await response.json()
      if (result.success) {
        setUsers([result.data, ...users])
        setShowUserForm(false)
        alert('用户创建成功')
      } else {
        alert(`创建失败：${result.error}`)
      }
    } catch (error) {
      console.error('创建用户失败:', error)
      alert('创建用户失败')
    }
  }

  const handleStartScraping = async (productId: string) => {
    try {
      const response = await fetch('/api/admin/scraping', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productId,
          platform: scrapingConfig.platform,
          keywords: scrapingConfig.keywords,
          maxComments: scrapingConfig.maxComments,
          dateRange: scrapingConfig.dateRange
        })
      })
      const result = await response.json()
      if (result.success) {
        alert('爬取任务创建成功')
        setShowScrapingModal(false)
        loadPainPoints() // 重新加载痛点数据
      } else {
        alert(`创建爬取任务失败：${result.error}`)
      }
    } catch (error) {
      console.error('创建爬取任务失败:', error)
      alert('创建爬取任务失败')
    }
  }

  const handleAIAnalyze = async (painPointId: string) => {
    try {
      const response = await fetch('/api/admin/ai-analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          painPointId,
          comments: [] // 这里应该传入实际的评论数据
        })
      })
      const result = await response.json()
      if (result.success) {
        alert('AI分析完成')
        loadPainPoints() // 重新加载痛点数据
      } else {
        alert(`AI分析失败：${result.error}`)
      }
    } catch (error) {
      console.error('AI分析失败:', error)
      alert('AI分析失败')
    }
  }

  const handleFilterChange = (filterType: string, value: string) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }))
  }

  const handleViewProductDetail = (productName: string) => {
    // 模拟获取商品详细数据
    const mockProductDetail = {
      name: productName,
      category: '电子产品',
      performance: {
        totalSpend: 2345,
        totalGMV: 8765,
        totalViews: 456,
        ctr: 3.2,
        roi: 3.7,
        conversionRate: 2.1,
        avgOrderValue: 89.5
      },
      campaigns: [
        {
          id: '1',
          name: '科技感产品展示',
          platform: 'TikTok',
          status: 'active',
          spend: 1200,
          gmv: 4500,
          views: 230,
          ctr: 3.5,
          roi: 3.8,
          startDate: '2024-01-01',
          endDate: '2024-01-31'
        },
        {
          id: '2',
          name: '功能演示视频',
          platform: 'Instagram',
          status: 'paused',
          spend: 800,
          gmv: 3200,
          views: 180,
          ctr: 2.8,
          roi: 4.0,
          startDate: '2024-01-15',
          endDate: '2024-02-15'
        },
        {
          id: '3',
          name: '用户评价合集',
          platform: 'YouTube',
          status: 'completed',
          spend: 345,
          gmv: 1065,
          views: 46,
          ctr: 3.1,
          roi: 3.1,
          startDate: '2024-01-20',
          endDate: '2024-01-25'
        }
      ],
      videos: [
        {
          id: '1',
          title: '科技感产品展示',
          platform: 'TikTok',
          duration: '30s',
          views: 230,
          likes: 45,
          shares: 12,
          comments: 8,
          ctr: 3.5,
          conversionRate: 2.1,
          createdAt: '2024-01-01'
        },
        {
          id: '2',
          title: '功能演示视频',
          platform: 'Instagram',
          duration: '60s',
          views: 180,
          likes: 38,
          shares: 9,
          comments: 5,
          ctr: 2.8,
          conversionRate: 1.8,
          createdAt: '2024-01-15'
        }
      ],
      trends: {
        dailySpend: [120, 135, 110, 145, 130, 140, 125],
        dailyGMV: [450, 520, 380, 580, 490, 560, 480],
        dailyViews: [25, 30, 22, 35, 28, 32, 26]
      }
    }
    
    setSelectedProduct(mockProductDetail)
    setShowProductDetail(true)
  }

  const handleSyncSheets = async () => {
    setIsSyncing(true)
    try {
      const response = await fetch('/api/admin/sync-sheets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      
      const result = await response.json()
      if (result.success) {
        setSyncResult(result.data)
        // 重新加载数据
        // 这里可以添加重新加载逻辑
      }
    } catch (error) {
      console.error('同步失败:', error)
    } finally {
      setIsSyncing(false)
    }
  }

  const handleBulkUpload = async () => {
    if (!bulkUploadFile) return

    setBulkUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', bulkUploadFile)
      formData.append('type', 'products') // 指定上传类型

      const response = await fetch('/api/admin/bulk-upload', {
        method: 'POST',
        body: formData
      })

      const result = await response.json()
      if (result.success) {
        alert(`批量上传成功！处理了 ${result.processed} 条记录`)
        setShowBulkUpload(false)
        setBulkUploadFile(null)
        // 重新加载数据
        // TODO: 实现数据重新加载逻辑
      } else {
        alert(`批量上传失败：${result.error}`)
      }
    } catch (error) {
      console.error('批量上传失败:', error)
      alert('批量上传失败，请重试')
    } finally {
      setBulkUploading(false)
    }
  }

  const handleAITuning = async () => {
    try {
      const response = await fetch('/api/ranking/ai-tuning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          targetLevel: 'global',
          optimizationGoal: 'ctr'
        })
      })

      const result = await response.json()
      if (result.success) {
        alert('AI调参完成！预期CTR提升' + result.data.expectedImprovement.ctrImprovement.toFixed(1) + '%')
        // 调参完成后回到风格库
        setShowRankingTuning(false)
        setActiveTab('styles')
      } else {
        alert(`AI调参失败：${result.error}`)
      }
    } catch (error) {
      console.error('AI调参失败:', error)
      alert('AI调参失败，请重试')
    }
  }

  const handleSaveConfig = async () => {
    try {
      const response = await fetch('/api/ranking/tuning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          level: 'global',
          levelId: 'global',
          coarseRanking: {
            weightFactors: {
              relevance: tuningConfig.coarseRanking.relevance / 100,
              quality: tuningConfig.coarseRanking.quality / 100,
              diversity: tuningConfig.coarseRanking.diversity / 100,
              recency: tuningConfig.coarseRanking.recency / 100
            }
          },
          fineRanking: {
            weightFactors: {
              userPreference: tuningConfig.fineRanking.userPreference / 100,
              businessValue: tuningConfig.fineRanking.businessValue / 100,
              technicalQuality: tuningConfig.fineRanking.technicalQuality / 100,
              marketTrend: tuningConfig.fineRanking.marketTrend / 100
            }
          }
        })
      })

      const result = await response.json()
      if (result.success) {
        alert('配置保存成功！')
      } else {
        alert(`保存失败：${result.error}`)
      }
    } catch (error) {
      console.error('保存配置失败:', error)
      alert('保存配置失败，请重试')
    }
  }

  const renderProductForm = () => (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>{editingProduct ? '编辑商品' : '添加商品'}</CardTitle>
        <CardDescription>
          {editingProduct ? '修改商品信息' : '添加新商品到商品库'}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="name">商品名称</Label>
            <Input id="name" defaultValue={editingProduct?.name || ''} />
          </div>
          <div>
            <Label htmlFor="category">类目</Label>
            <Select defaultValue={editingProduct?.category || ''}>
              <SelectTrigger>
                <SelectValue placeholder="选择类目" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="电子产品">电子产品</SelectItem>
                <SelectItem value="美妆护肤">美妆护肤</SelectItem>
                <SelectItem value="运动健身">运动健身</SelectItem>
                <SelectItem value="服装配饰">服装配饰</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div>
          <Label htmlFor="description">商品描述</Label>
          <Textarea id="description" defaultValue={editingProduct?.description || ''} />
        </div>

        <div>
          <Label htmlFor="sellingPoints">卖点（每行一个）</Label>
          <Textarea 
            id="sellingPoints" 
            defaultValue={editingProduct?.sellingPoints?.join('\n') || ''} 
            rows={4}
          />
        </div>

        <div className="flex gap-2">
          <Button onClick={() => setShowProductForm(false)}>
            {editingProduct ? '更新' : '添加'}
          </Button>
          <Button variant="outline" onClick={() => setShowProductForm(false)}>
            取消
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderProductDetail = () => (
    <div className="space-y-6">
      {/* 返回按钮 */}
      <div className="flex items-center gap-4">
        <Button 
          variant="outline" 
          onClick={() => setShowProductDetail(false)}
          className="flex items-center gap-2"
        >
          ← 返回数据分析
        </Button>
        <h2 className="text-2xl font-semibold">{selectedProduct?.name} - 详细分析</h2>
      </div>

      {/* 核心指标 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">${selectedProduct?.performance.totalSpend}</div>
              <div className="text-sm text-gray-600">总花费</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600">${selectedProduct?.performance.totalGMV}</div>
              <div className="text-sm text-gray-600">总GMV</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-600">{selectedProduct?.performance.totalViews}</div>
              <div className="text-sm text-gray-600">总播放</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-orange-600">{selectedProduct?.performance.roi}x</div>
              <div className="text-sm text-gray-600">ROI</div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 详细指标 */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>转化指标</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">CTR</span>
              <span className="font-medium">{selectedProduct?.performance.ctr}%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">转化率</span>
              <span className="font-medium">{selectedProduct?.performance.conversionRate}%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">客单价</span>
              <span className="font-medium">${selectedProduct?.performance.avgOrderValue}</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>趋势分析</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-sm text-gray-600">最近7天趋势</div>
              <div className="text-xs text-gray-500">
                花费: ${selectedProduct?.trends.dailySpend.join(', ')}
              </div>
              <div className="text-xs text-gray-500">
                GMV: ${selectedProduct?.trends.dailyGMV.join(', ')}
              </div>
              <div className="text-xs text-gray-500">
                播放: {selectedProduct?.trends.dailyViews.join(', ')}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>平台分布</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>TikTok</span>
                <span className="font-medium">45%</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Instagram</span>
                <span className="font-medium">35%</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>YouTube</span>
                <span className="font-medium">20%</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 广告系列详情 */}
      <Card>
        <CardHeader>
          <CardTitle>广告系列表现</CardTitle>
          <CardDescription>各广告系列的详细数据</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="border rounded-lg">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">广告系列</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">平台</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">状态</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">花费</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">GMV</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">播放</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">CTR</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">ROI</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {selectedProduct?.campaigns.map((campaign: any) => (
                  <tr key={campaign.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3">
                      <div className="font-medium text-gray-900">{campaign.name}</div>
                      <div className="text-sm text-gray-500">
                        {campaign.startDate} - {campaign.endDate}
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <Badge variant="outline">{campaign.platform}</Badge>
                    </td>
                    <td className="px-4 py-3">
                      <Badge 
                        variant={campaign.status === 'active' ? 'default' : 
                                campaign.status === 'paused' ? 'secondary' : 'outline'}
                      >
                        {campaign.status === 'active' ? '进行中' : 
                         campaign.status === 'paused' ? '暂停' : '已完成'}
                      </Badge>
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">${campaign.spend}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">${campaign.gmv}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{campaign.views}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{campaign.ctr}%</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{campaign.roi}x</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* 视频表现 */}
      <Card>
        <CardHeader>
          <CardTitle>视频表现详情</CardTitle>
          <CardDescription>各视频的详细表现数据</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="border rounded-lg">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">视频标题</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">平台</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">时长</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">播放</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">点赞</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">分享</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">评论</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">CTR</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">转化率</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {selectedProduct?.videos.map((video: any) => (
                  <tr key={video.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3">
                      <div className="font-medium text-gray-900">{video.title}</div>
                      <div className="text-sm text-gray-500">{video.createdAt}</div>
                    </td>
                    <td className="px-4 py-3">
                      <Badge variant="outline">{video.platform}</Badge>
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.duration}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.views}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.likes}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.shares}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.comments}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.ctr}%</td>
                    <td className="px-4 py-3 text-sm text-gray-900">{video.conversionRate}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderRankingTuning = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <Card className="w-full max-w-6xl mx-4 max-h-[90vh] overflow-y-auto">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>调参优化</CardTitle>
              <CardDescription>优化模版的粗排和精排算法参数，让预估值和实际表现数据越来越准</CardDescription>
            </div>
            <Button variant="outline" onClick={() => setShowRankingTuning(false)}>
              ✕ 关闭
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* 当前配置概览 */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-xl font-bold text-blue-600">粗排-类目-30%</div>
                  <div className="text-sm text-gray-600">相关性权重</div>
                  <div className="text-xs text-red-600 mt-1">⚠️ 权重过高</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-xl font-bold text-green-600">精排-质量-25%</div>
                  <div className="text-sm text-gray-600">质量权重</div>
                  <div className="text-xs text-green-600 mt-1">✓ 表现良好</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-xl font-bold text-purple-600">CTR: 2.1%</div>
                  <div className="text-sm text-gray-600">当前点击率</div>
                  <div className="text-xs text-red-600 mt-1">↓ 低于预期</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-xl font-bold text-orange-600">CVR: 1.8%</div>
                  <div className="text-sm text-gray-600">当前转化率</div>
                  <div className="text-xs text-red-600 mt-1">↓ 低于预期</div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* AI一键调参按钮 */}
          <div className="flex justify-center gap-4">
            <Button onClick={handleAITuning} className="bg-blue-600 hover:bg-blue-700">
              <Brain className="h-4 w-4 mr-2" />
              AI一键调参
            </Button>
          </div>

          {/* 参数配置 */}
          <Card>
            <CardHeader>
              <CardTitle>粗排和精排参数配置</CardTitle>
              <CardDescription>展示当前各层级参数配置，支持手工调整大盘参数</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* 大盘配置 */}
                <div>
                  <h3 className="text-lg font-semibold mb-4">大盘配置（用户可调）</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base">粗排参数</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="space-y-3">
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">相关性权重</span>
                              <span className="text-sm font-medium">{tuningConfig.coarseRanking.relevance}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.coarseRanking.relevance}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                coarseRanking: { ...prev.coarseRanking, relevance: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">质量权重</span>
                              <span className="text-sm font-medium">{tuningConfig.coarseRanking.quality}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.coarseRanking.quality}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                coarseRanking: { ...prev.coarseRanking, quality: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">多样性权重</span>
                              <span className="text-sm font-medium">{tuningConfig.coarseRanking.diversity}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.coarseRanking.diversity}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                coarseRanking: { ...prev.coarseRanking, diversity: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">时效性权重</span>
                              <span className="text-sm font-medium">{tuningConfig.coarseRanking.recency}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.coarseRanking.recency}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                coarseRanking: { ...prev.coarseRanking, recency: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base">精排参数</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="space-y-3">
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">用户偏好权重</span>
                              <span className="text-sm font-medium">{tuningConfig.fineRanking.userPreference}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.fineRanking.userPreference}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                fineRanking: { ...prev.fineRanking, userPreference: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">商业价值权重</span>
                              <span className="text-sm font-medium">{tuningConfig.fineRanking.businessValue}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.fineRanking.businessValue}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                fineRanking: { ...prev.fineRanking, businessValue: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">技术质量权重</span>
                              <span className="text-sm font-medium">{tuningConfig.fineRanking.technicalQuality}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.fineRanking.technicalQuality}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                fineRanking: { ...prev.fineRanking, technicalQuality: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm">市场趋势权重</span>
                              <span className="text-sm font-medium">{tuningConfig.fineRanking.marketTrend}%</span>
                            </div>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={tuningConfig.fineRanking.marketTrend}
                              onChange={(e) => setTuningConfig(prev => ({
                                ...prev,
                                fineRanking: { ...prev.fineRanking, marketTrend: parseInt(e.target.value) }
                              }))}
                              className="w-full"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                  
                  {/* 保存按钮 */}
                  <div className="flex justify-center mt-6">
                    <Button onClick={handleSaveConfig} className="bg-green-600 hover:bg-green-700">
                      保存配置
                    </Button>
                  </div>
                </div>

                {/* 数据分析建议 */}
                <Card>
                  <CardHeader>
                    <CardTitle>数据分析与优化建议</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div className="flex items-start">
                          <div className="flex-shrink-0">
                            <div className="text-yellow-600 text-xl">⚠️</div>
                          </div>
                          <div className="ml-3">
                            <h4 className="text-sm font-medium text-yellow-800">参数配置问题</h4>
                            <div className="mt-2 text-sm text-yellow-700">
                              <ul className="list-disc list-inside space-y-1">
                                <li>相关性权重30%过高，导致很多表现差的模版胜出</li>
                                <li>电子产品类目下，质量权重应该更高</li>
                                <li>多样性权重25%可能影响转化效果</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div className="flex items-start">
                          <div className="flex-shrink-0">
                            <div className="text-blue-600 text-xl">💡</div>
                          </div>
                          <div className="ml-3">
                            <h4 className="text-sm font-medium text-blue-800">AI优化建议</h4>
                            <div className="mt-2 text-sm text-blue-700">
                              <ul className="list-disc list-inside space-y-1">
                                <li>建议将相关性权重降低至25%，质量权重提高至30%</li>
                                <li>针对电子产品类目，建议质量权重提升至35%</li>
                                <li>考虑引入时间衰减因子，降低旧模版的影响</li>
                                <li>建议启用A/B测试验证参数调整效果</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </CardContent>
      </Card>
    </div>
  )

  const renderStyleForm = () => (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>{editingStyle ? '编辑风格' : '添加风格'}</CardTitle>
        <CardDescription>
          {editingStyle ? '修改风格信息' : '添加新风格到风格库'}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="styleName">风格名称</Label>
            <Input id="styleName" defaultValue={editingStyle?.name || ''} />
          </div>
          <div>
            <Label htmlFor="styleCategory">类目</Label>
            <Select defaultValue={editingStyle?.category || ''}>
              <SelectTrigger>
                <SelectValue placeholder="选择类目" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="电子产品">电子产品</SelectItem>
                <SelectItem value="美妆护肤">美妆护肤</SelectItem>
                <SelectItem value="运动健身">运动健身</SelectItem>
                <SelectItem value="服装配饰">服装配饰</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div>
          <Label htmlFor="styleDescription">风格描述</Label>
          <Textarea id="styleDescription" defaultValue={editingStyle?.description || ''} />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="tone">语调</Label>
            <Select defaultValue={editingStyle?.tone || ''}>
              <SelectTrigger>
                <SelectValue placeholder="选择语调" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="professional">专业</SelectItem>
                <SelectItem value="elegant">优雅</SelectItem>
                <SelectItem value="energetic">活力</SelectItem>
                <SelectItem value="casual">休闲</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="isActive">状态</Label>
            <Select defaultValue={editingStyle?.isActive ? 'true' : 'false'}>
              <SelectTrigger>
                <SelectValue placeholder="选择状态" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="true">启用</SelectItem>
                <SelectItem value="false">禁用</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="flex gap-2">
          <Button onClick={() => setShowStyleForm(false)}>
            {editingStyle ? '更新' : '添加'}
          </Button>
          <Button variant="outline" onClick={() => setShowStyleForm(false)}>
            取消
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderUserForm = () => (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>{editingUser ? '编辑用户' : '添加用户'}</CardTitle>
        <CardDescription>
          {editingUser ? '修改用户信息' : '添加新用户到系统'}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="userName">姓名</Label>
            <Input id="userName" defaultValue={editingUser?.name || ''} />
          </div>
          <div>
            <Label htmlFor="userEmail">邮箱</Label>
            <Input id="userEmail" type="email" defaultValue={editingUser?.email || ''} />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="userRole">角色</Label>
            <Select defaultValue={editingUser?.role || 'viewer'}>
              <SelectTrigger>
                <SelectValue placeholder="选择角色" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="admin">管理员</SelectItem>
                <SelectItem value="manager">经理</SelectItem>
                <SelectItem value="operator">操作员</SelectItem>
                <SelectItem value="viewer">查看者</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="userPassword">密码</Label>
            <Input id="userPassword" type="password" placeholder="留空则不修改" />
          </div>
        </div>

        <div className="flex gap-2">
          <Button onClick={() => {
            const formData = {
              name: (document.getElementById('userName') as HTMLInputElement)?.value,
              email: (document.getElementById('userEmail') as HTMLInputElement)?.value,
              role: (document.getElementById('userRole') as HTMLSelectElement)?.value,
              password: (document.getElementById('userPassword') as HTMLInputElement)?.value
            }
            handleCreateUser(formData)
          }}>
            {editingUser ? '更新' : '添加'}
          </Button>
          <Button variant="outline" onClick={() => setShowUserForm(false)}>
            取消
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderPainPointForm = () => (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>手动添加痛点分析</CardTitle>
        <CardDescription>
          手动添加产品痛点分析数据
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="painProduct">产品</Label>
            <Select>
              <SelectTrigger>
                <SelectValue placeholder="选择产品" />
              </SelectTrigger>
              <SelectContent>
                {products.map(product => (
                  <SelectItem key={product.id} value={product.id}>
                    {product.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="painPlatform">平台</Label>
            <Select>
              <SelectTrigger>
                <SelectValue placeholder="选择平台" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="shopee">Shopee</SelectItem>
                <SelectItem value="tiktok">TikTok</SelectItem>
                <SelectItem value="amazon">Amazon</SelectItem>
                <SelectItem value="facebook">Facebook</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div>
          <Label htmlFor="painPoints">痛点（每行一个）</Label>
          <Textarea 
            id="painPoints" 
            rows={4}
            placeholder="音质不够清晰&#10;电池续航短&#10;连接不稳定"
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="painSeverity">严重程度</Label>
            <Select>
              <SelectTrigger>
                <SelectValue placeholder="选择严重程度" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="low">低</SelectItem>
                <SelectItem value="medium">中</SelectItem>
                <SelectItem value="high">高</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="painSentiment">情感</Label>
            <Select>
              <SelectTrigger>
                <SelectValue placeholder="选择情感" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="positive">正面</SelectItem>
                <SelectItem value="neutral">中性</SelectItem>
                <SelectItem value="negative">负面</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="flex gap-2">
          <Button onClick={() => setShowPainPointForm(false)}>
            添加
          </Button>
          <Button variant="outline" onClick={() => setShowPainPointForm(false)}>
            取消
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderScrapingModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <Card className="w-full max-w-md mx-4">
        <CardHeader>
          <CardTitle>开始评论爬取</CardTitle>
          <CardDescription>
            配置爬取参数，从指定平台获取产品评论
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="scrapingProduct">选择产品</Label>
            <Select onValueChange={(value) => setScrapingConfig(prev => ({ ...prev, productId: value }))}>
              <SelectTrigger>
                <SelectValue placeholder="选择产品" />
              </SelectTrigger>
              <SelectContent>
                {products.map(product => (
                  <SelectItem key={product.id} value={product.id}>
                    {product.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="scrapingPlatform">目标平台</Label>
            <Select onValueChange={(value) => setScrapingConfig(prev => ({ ...prev, platform: value }))}>
              <SelectTrigger>
                <SelectValue placeholder="选择平台" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="shopee">Shopee</SelectItem>
                <SelectItem value="tiktok">TikTok</SelectItem>
                <SelectItem value="amazon">Amazon</SelectItem>
                <SelectItem value="facebook">Facebook</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="scrapingKeywords">搜索关键词</Label>
            <Input 
              id="scrapingKeywords"
              placeholder="产品相关关键词"
              value={scrapingConfig.keywords}
              onChange={(e) => setScrapingConfig(prev => ({ ...prev, keywords: e.target.value }))}
            />
          </div>

          <div>
            <Label htmlFor="scrapingMaxComments">最大评论数</Label>
            <Input 
              id="scrapingMaxComments"
              type="number"
              placeholder="100"
              value={scrapingConfig.maxComments}
              onChange={(e) => setScrapingConfig(prev => ({ ...prev, maxComments: parseInt(e.target.value) }))}
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button 
              variant="outline" 
              onClick={() => setShowScrapingModal(false)}
            >
              取消
            </Button>
            <Button 
              onClick={() => {
                const productId = (document.querySelector('[data-value]') as HTMLElement)?.getAttribute('data-value')
                if (productId) {
                  handleStartScraping(productId)
                }
              }}
            >
              开始爬取
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderSubmissionDetail = () => {
    if (!selectedSubmission) return null

    const submissionData = JSON.parse(selectedSubmission.data)
    const originalData = selectedSubmission.originalData ? JSON.parse(selectedSubmission.originalData) : null

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <Card className="w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
          <CardHeader>
            <CardTitle>用户提交详情</CardTitle>
            <CardDescription>
              {selectedSubmission.type === 'style' ? '风格信息' : '商品信息'} - 
              {selectedSubmission.source === 'user_video_analysis' ? '用户视频解析' :
               selectedSubmission.source === 'user_modified' ? '用户修改' :
               selectedSubmission.source === 'user_analysis' ? '用户分析' : '手动上传'}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* 基本信息 */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>提交类型</Label>
                <div className="text-sm text-gray-600">
                  {selectedSubmission.type === 'style' ? '风格' : '商品'}
                </div>
              </div>
              <div>
                <Label>状态</Label>
                <div className="text-sm">
                  <Badge variant={
                    selectedSubmission.status === 'pending' ? 'secondary' :
                    selectedSubmission.status === 'approved' ? 'default' : 'destructive'
                  }>
                    {selectedSubmission.status === 'pending' ? '待审核' :
                     selectedSubmission.status === 'approved' ? '已通过' : '已拒绝'}
                  </Badge>
                </div>
              </div>
              <div>
                <Label>提交时间</Label>
                <div className="text-sm text-gray-600">
                  {new Date(selectedSubmission.createdAt).toLocaleString()}
                </div>
              </div>
              <div>
                <Label>来源</Label>
                <div className="text-sm text-gray-600">
                  {selectedSubmission.sourceUrl && (
                    <a href={selectedSubmission.sourceUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                      {selectedSubmission.sourceUrl}
                    </a>
                  )}
                </div>
              </div>
            </div>

            {/* 提交的数据 */}
            <div>
              <Label>提交的数据</Label>
              <div className="mt-2 p-4 bg-gray-50 rounded-lg">
                <pre className="text-sm whitespace-pre-wrap">
                  {JSON.stringify(submissionData, null, 2)}
                </pre>
              </div>
            </div>

            {/* 原始数据对比（如果有） */}
            {originalData && (
              <div>
                <Label>原始数据对比</Label>
                <div className="mt-2 p-4 bg-gray-50 rounded-lg">
                  <pre className="text-sm whitespace-pre-wrap">
                    {JSON.stringify(originalData, null, 2)}
                  </pre>
                </div>
              </div>
            )}

            {/* 审核操作 */}
            {selectedSubmission.status === 'pending' && (
              <div className="flex gap-4">
                <Button 
                  onClick={() => handleReviewSubmission(selectedSubmission.id, 'approved')}
                  className="flex-1"
                >
                  通过
                </Button>
                <Button 
                  variant="destructive"
                  onClick={() => handleReviewSubmission(selectedSubmission.id, 'rejected')}
                  className="flex-1"
                >
                  拒绝
                </Button>
              </div>
            )}

            {/* 关闭按钮 */}
            <div className="flex justify-end">
              <Button variant="outline" onClick={() => {
                setShowSubmissionDetail(false)
                setSelectedSubmission(null)
              }}>
                关闭
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen py-8">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            管理员控制台
          </h1>
          <p className="text-xl text-gray-600">
            管理商品库、风格库和系统设置
          </p>
        </div>

        {showProductForm && renderProductForm()}
        {showStyleForm && renderStyleForm()}
        {showUserForm && renderUserForm()}
        {showPainPointForm && renderPainPointForm()}
        {showProductDetail && renderProductDetail()}
        {showRankingTuning && renderRankingTuning()}
        {showScrapingModal && renderScrapingModal()}
        {showSubmissionDetail && renderSubmissionDetail()}

        {!showProductForm && !showStyleForm && !showUserForm && !showPainPointForm && !showProductDetail && !showRankingTuning && !showSubmissionDetail && (
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-8">
              <TabsTrigger value="products" className="flex items-center gap-2">
                <Package className="h-4 w-4" />
                商品库
              </TabsTrigger>
              <TabsTrigger value="styles" className="flex items-center gap-2">
                <Palette className="h-4 w-4" />
                风格库
              </TabsTrigger>
              <TabsTrigger value="users" className="flex items-center gap-2">
                <Users className="h-4 w-4" />
                用户管理
              </TabsTrigger>
              <TabsTrigger value="user-submissions" className="flex items-center gap-2">
                <Upload className="h-4 w-4" />
                用户提交
              </TabsTrigger>
              <TabsTrigger value="pain-points" className="flex items-center gap-2">
                <MessageSquare className="h-4 w-4" />
                痛点分析
              </TabsTrigger>
              <TabsTrigger value="sync" className="flex items-center gap-2">
                <Database className="h-4 w-4" />
                数据同步
              </TabsTrigger>
              <TabsTrigger value="analytics" className="flex items-center gap-2">
                <BarChart3 className="h-4 w-4" />
                数据分析
              </TabsTrigger>
              <TabsTrigger value="ai-config" className="flex items-center gap-2">
                <Brain className="h-4 w-4" />
                AI配置
              </TabsTrigger>
            </TabsList>

            <TabsContent value="products" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">商品库管理</h2>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => setShowBulkUpload(true)}>
                    <Upload className="h-4 w-4 mr-2" />
                    批量上传
                  </Button>
                  <Button onClick={() => setShowProductForm(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    添加商品
                  </Button>
                </div>
              </div>

              <div className="border rounded-lg">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">商品名称</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">类目</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">卖点</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">目标国家</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">创建时间</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {products.map((product) => (
                      <tr key={product.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3">
                          <div>
                            <div className="font-medium text-gray-900">{product.name}</div>
                            <div className="text-sm text-gray-500">{product.description}</div>
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-1">
                            <Badge variant="outline" className="text-xs">{product.category}</Badge>
                            {product.subcategory && (
                              <Badge variant="secondary" className="text-xs">{product.subcategory}</Badge>
                            )}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <div className="text-sm text-gray-600 max-w-xs truncate">
                            {product.sellingPoints.join(', ')}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex flex-wrap gap-1">
                            {product.targetCountries.map((country) => (
                              <Badge key={country} variant="outline" className="text-xs">{country}</Badge>
                            ))}
                          </div>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-500">
                          {new Date(product.createdAt).toLocaleDateString()}
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={() => handleEditProduct(product)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button size="sm" variant="destructive" onClick={() => handleDeleteProduct(product.id)}>
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </TabsContent>

            <TabsContent value="styles" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">风格库管理</h2>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => setShowRankingTuning(true)}>
                    <Settings className="h-4 w-4 mr-2" />
                    调参优化
                  </Button>
                  <Button variant="outline" onClick={() => {/* TODO: 批量上传功能 */}}>
                    <Upload className="h-4 w-4 mr-2" />
                    批量上传
                  </Button>
                  <Button onClick={() => setShowStyleForm(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    添加风格
                  </Button>
                </div>
              </div>

              <div className="border rounded-lg">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">风格名称</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">关联商品</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">类目</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">语调</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">目标受众</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">状态</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {styles.map((style) => (
                      <tr key={style.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3">
                          <div>
                            <div className="font-medium text-gray-900">{style.name}</div>
                            <div className="text-sm text-gray-500">{style.description}</div>
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <div className="text-sm text-gray-900">{style.productName}</div>
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-1">
                            <Badge variant="outline" className="text-xs">{style.category}</Badge>
                            {style.subcategory && (
                              <Badge variant="secondary" className="text-xs">{style.subcategory}</Badge>
                            )}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant="outline" className="text-xs">{style.tone}</Badge>
                        </td>
                        <td className="px-4 py-3">
                          <div className="text-sm text-gray-600">
                            {style.targetAudience.age}岁, {style.targetAudience.gender}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant={style.isActive ? "default" : "secondary"}>
                            {style.isActive ? '启用' : '禁用'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={() => handleEditStyle(style)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button size="sm" variant="destructive" onClick={() => handleDeleteStyle(style.id)}>
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </TabsContent>

            <TabsContent value="users" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">用户管理</h2>
                <Button onClick={() => setShowUserForm(true)}>
                  <Plus className="h-4 w-4 mr-2" />
                  添加用户
                </Button>
              </div>

              <div className="border rounded-lg">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">用户信息</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">角色</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">状态</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">视频数</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">创建时间</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {users.map((user) => (
                      <tr key={user.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3">
                          <div>
                            <div className="font-medium text-gray-900">{user.name}</div>
                            <div className="text-sm text-gray-500">{user.email}</div>
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant="outline" className="text-xs">
                            {user.role === 'admin' ? '管理员' : 
                             user.role === 'manager' ? '经理' :
                             user.role === 'operator' ? '操作员' : '查看者'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant={user.isActive ? "default" : "secondary"}>
                            {user.isActive ? '活跃' : '禁用'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-900">{user._count.videos}</td>
                        <td className="px-4 py-3 text-sm text-gray-500">
                          {new Date(user.createdAt).toLocaleDateString()}
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={() => handleEditUser(user)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button size="sm" variant="destructive" onClick={() => handleDeleteUser(user.id)}>
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </TabsContent>

            <TabsContent value="user-submissions" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">用户提交管理</h2>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => loadUserSubmissions()}>
                    <RefreshCw className="h-4 w-4 mr-2" />
                    刷新
                  </Button>
                </div>
              </div>

              <div className="border rounded-lg">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">类型</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">来源</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">状态</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">提交时间</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {userSubmissions.map((submission) => (
                      <tr key={submission.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3">
                          <Badge variant="outline" className="text-xs">
                            {submission.type === 'style' ? '风格' : '商品'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <div className="text-sm">
                            <div className="font-medium text-gray-900">
                              {submission.source === 'user_video_analysis' ? '用户视频解析' :
                               submission.source === 'user_modified' ? '用户修改' :
                               submission.source === 'user_analysis' ? '用户分析' : '手动上传'}
                            </div>
                            {submission.sourceUrl && (
                              <div className="text-xs text-gray-500 truncate max-w-xs">
                                {submission.sourceUrl}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant={
                            submission.status === 'pending' ? 'secondary' :
                            submission.status === 'approved' ? 'default' : 'destructive'
                          }>
                            {submission.status === 'pending' ? '待审核' :
                             submission.status === 'approved' ? '已通过' : '已拒绝'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-500">
                          {new Date(submission.createdAt).toLocaleString()}
                        </td>
                        <td className="px-4 py-3">
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={() => handleViewSubmission(submission)}>
                              查看详情
                            </Button>
                            {submission.status === 'pending' && (
                              <>
                                <Button size="sm" variant="default" onClick={() => handleReviewSubmission(submission.id, 'approved')}>
                                  通过
                                </Button>
                                <Button size="sm" variant="destructive" onClick={() => handleReviewSubmission(submission.id, 'rejected')}>
                                  拒绝
                                </Button>
                              </>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </TabsContent>

            <TabsContent value="pain-points" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">产品痛点分析</h2>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => setShowScrapingModal(true)}>
                    <Search className="h-4 w-4 mr-2" />
                    开始爬取
                  </Button>
                  <Button onClick={() => setShowPainPointForm(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    手动添加
                  </Button>
                </div>
              </div>

              <div className="border rounded-lg">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">产品信息</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">平台</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">痛点</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">严重程度</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">情感</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">评论数</th>
                      <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {painPoints.map((painPoint) => (
                      <tr key={painPoint.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3">
                          <div>
                            <div className="font-medium text-gray-900">{painPoint.productName}</div>
                            <div className="text-sm text-gray-500">{painPoint.product.category}</div>
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant="outline" className="text-xs">
                            {painPoint.platform}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <div className="text-sm text-gray-600 max-w-xs">
                            {painPoint.painPoints.slice(0, 2).join(', ')}
                            {painPoint.painPoints.length > 2 && '...'}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <Badge 
                            variant={painPoint.severity === 'high' ? 'destructive' : 
                                    painPoint.severity === 'medium' ? 'default' : 'secondary'}
                            className="text-xs"
                          >
                            {painPoint.severity === 'high' ? '高' : 
                             painPoint.severity === 'medium' ? '中' : '低'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <Badge 
                            variant={painPoint.sentiment === 'negative' ? 'destructive' : 
                                    painPoint.sentiment === 'positive' ? 'default' : 'secondary'}
                            className="text-xs"
                          >
                            {painPoint.sentiment === 'negative' ? '负面' : 
                             painPoint.sentiment === 'positive' ? '正面' : '中性'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-900">{painPoint._count.comments}</td>
                        <td className="px-4 py-3">
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={() => handleAIAnalyze(painPoint.id)}>
                              <Brain className="h-4 w-4" />
                            </Button>
                            <Button size="sm" variant="destructive">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </TabsContent>

            <TabsContent value="sync" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">数据同步</h2>
                <Button 
                  onClick={handleSyncSheets}
                  disabled={isSyncing}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isSyncing ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      同步中...
                    </>
                  ) : (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2" />
                      同步Google Sheets
                    </>
                  )}
                </Button>
              </div>

              <div className="grid gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Google Sheets 配置</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium">Google Sheets 链接</Label>
                      <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                        <a 
                          href="https://docs.google.com/spreadsheets/d/1q_ZqVw4DVRbcAA78ZVndXq4XcFEySNmRoLHiFkllFls" 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline"
                        >
                          https://docs.google.com/spreadsheets/d/1q_ZqVw4DVRbcAA78ZVndXq4XcFEySNmRoLHiFkllFls
                        </a>
                      </div>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium">字段要求</Label>
                      <div className="mt-2 space-y-2">
                        <div className="text-sm text-gray-600">
                          <strong>必需字段：</strong>
                        </div>
                        <ul className="text-sm text-gray-600 ml-4 space-y-1">
                          <li>• TemplateID: 模板唯一标识 (如: TMP001)</li>
                          <li>• TemplateName: 模板名称</li>
                          <li>• ProductId: 关联商品ID</li>
                          <li>• Structure: 脚本结构</li>
                          <li>• HookPool: Hook池</li>
                          <li>• VideoStylePool: 视频风格池</li>
                          <li>• TonePool: 语调池</li>
                          <li>• SuggestedLength: 建议时长</li>
                          <li>• RecommendedCategories: 推荐类目</li>
                          <li>• TargetCountries: 目标国家</li>
                          <li>• TemplatePrompt: 模板提示词</li>
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {syncResult && (
                  <Card>
                    <CardHeader>
                      <CardTitle>同步结果</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-blue-600">{syncResult.totalTemplates}</div>
                          <div className="text-sm text-gray-600">总模板数</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-green-600">{syncResult.createdCount}</div>
                          <div className="text-sm text-gray-600">新增</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-orange-600">{syncResult.updatedCount}</div>
                          <div className="text-sm text-gray-600">更新</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-red-600">{syncResult.duplicatesFound}</div>
                          <div className="text-sm text-gray-600">重复检测</div>
                        </div>
                      </div>

                      {syncResult.duplicates && syncResult.duplicates.length > 0 && (
                        <div>
                          <h4 className="font-medium mb-2">检测到的重复模板：</h4>
                          <div className="space-y-2">
                            {syncResult.duplicates.map((dup: any, index: number) => (
                              <div key={index} className="bg-yellow-50 p-3 rounded-lg">
                                <div className="flex justify-between items-center">
                                  <span className="text-sm">
                                    {dup.template1} ↔ {dup.template2}
                                  </span>
                                  <Badge variant="outline">相似度: {dup.similarity}%</Badge>
                                </div>
                                <div className="text-xs text-gray-600 mt-1">
                                  原因: {dup.reasons.join(', ')}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                <Card>
                  <CardHeader>
                    <CardTitle>同步说明</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2 text-sm text-gray-600">
                      <li>• 从Google Sheets自动同步模板数据</li>
                      <li>• 自动检测重复模板（相似度≥80%）</li>
                      <li>• 智能合并相似模板的Hook池、风格池等</li>
                      <li>• 保持数据一致性和去重</li>
                    </ul>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">数据分析看板</h2>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => {/* TODO: 导出功能 */}}>
                    <Database className="h-4 w-4 mr-2" />
                    导出数据
                  </Button>
                  <Button onClick={() => {/* TODO: 刷新数据 */}}>
                    <RefreshCw className="h-4 w-4 mr-2" />
                    刷新数据
                  </Button>
                </div>
              </div>

              {/* 筛选器 */}
              <Card>
                <CardHeader>
                  <CardTitle>数据筛选</CardTitle>
                  <CardDescription>选择时间范围、商品、平台和模板进行数据筛选</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                      <Label className="text-sm font-medium">时间范围</Label>
                      <Select value={filters.dateRange} onValueChange={(value) => handleFilterChange('dateRange', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="选择时间范围" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="1d">最近1天</SelectItem>
                          <SelectItem value="7d">最近7天</SelectItem>
                          <SelectItem value="30d">最近30天</SelectItem>
                          <SelectItem value="90d">最近90天</SelectItem>
                          <SelectItem value="custom">自定义</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium">商品</Label>
                      <Select value={filters.product} onValueChange={(value) => handleFilterChange('product', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="选择商品" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">全部商品</SelectItem>
                          <SelectItem value="earphone">无线蓝牙耳机</SelectItem>
                          <SelectItem value="watch">智能手表</SelectItem>
                          <SelectItem value="speaker">蓝牙音箱</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium">平台</Label>
                      <Select value={filters.platform} onValueChange={(value) => handleFilterChange('platform', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="选择平台" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">全部平台</SelectItem>
                          <SelectItem value="tiktok">TikTok</SelectItem>
                          <SelectItem value="instagram">Instagram</SelectItem>
                          <SelectItem value="youtube">YouTube</SelectItem>
                          <SelectItem value="facebook">Facebook</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium">模板</Label>
                      <Select value={filters.template} onValueChange={(value) => handleFilterChange('template', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="选择模板" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">全部模板</SelectItem>
                          <SelectItem value="tech">科技感风格</SelectItem>
                          <SelectItem value="fashion">时尚美妆风格</SelectItem>
                          <SelectItem value="lifestyle">生活方式风格</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="grid gap-4">
                {/* 总览指标 */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <Card>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <div className="text-3xl font-bold text-blue-600">$12,345</div>
                        <div className="text-sm text-gray-600">总花费</div>
                        <div className="text-xs text-green-600 mt-1">+12.5%</div>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <div className="text-3xl font-bold text-green-600">$45,678</div>
                        <div className="text-sm text-gray-600">总GMV</div>
                        <div className="text-xs text-green-600 mt-1">+8.3%</div>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <div className="text-3xl font-bold text-purple-600">1,234</div>
                        <div className="text-sm text-gray-600">总播放</div>
                        <div className="text-xs text-green-600 mt-1">+15.2%</div>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <div className="text-3xl font-bold text-orange-600">3.2%</div>
                        <div className="text-sm text-gray-600">平均CTR</div>
                        <div className="text-xs text-red-600 mt-1">-0.5%</div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* 趋势图 */}
                <Card>
                  <CardHeader>
                    <CardTitle>数据趋势图</CardTitle>
                    <CardDescription>关键指标的时间趋势分析</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-80 bg-gray-50 rounded-lg flex items-center justify-center">
                      <div className="text-center">
                        <div className="text-4xl mb-4">📈</div>
                        <div className="text-lg font-medium text-gray-700">趋势图</div>
                        <div className="text-sm text-gray-500 mt-2">
                          花费: $1,200 → $1,400 → $1,100 → $1,350 → $1,280 → $1,450 → $1,320
                        </div>
                        <div className="text-sm text-gray-500 mt-1">
                          GMV: $4,500 → $5,200 → $3,800 → $5,800 → $4,900 → $5,600 → $4,800
                        </div>
                        <div className="text-sm text-gray-500 mt-1">
                          播放: 25 → 30 → 22 → 35 → 28 → 32 → 26
                        </div>
                        <div className="text-xs text-gray-400 mt-4">
                          * 实际项目中可集成 Chart.js 或 Recharts 等图表库
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* 商品表现表格 */}
                <Card>
                  <CardHeader>
                    <CardTitle>商品表现排行</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="border rounded-lg">
                      <table className="w-full">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">商品名称</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">花费</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">GMV</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">播放</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">CTR</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">ROI</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                          <tr className="hover:bg-gray-50 cursor-pointer">
                            <td className="px-4 py-3">
                              <div className="font-medium text-gray-900">无线蓝牙耳机</div>
                              <div className="text-sm text-gray-500">电子产品</div>
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-900">$2,345</td>
                            <td className="px-4 py-3 text-sm text-gray-900">$8,765</td>
                            <td className="px-4 py-3 text-sm text-gray-900">456</td>
                            <td className="px-4 py-3 text-sm text-gray-900">3.2%</td>
                            <td className="px-4 py-3 text-sm text-gray-900">3.7x</td>
                            <td className="px-4 py-3">
                              <Button size="sm" variant="outline" onClick={() => handleViewProductDetail('无线蓝牙耳机')}>
                                查看详情
                              </Button>
                            </td>
                          </tr>
                          <tr className="hover:bg-gray-50 cursor-pointer">
                            <td className="px-4 py-3">
                              <div className="font-medium text-gray-900">智能手表</div>
                              <div className="text-sm text-gray-500">电子产品</div>
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-900">$1,876</td>
                            <td className="px-4 py-3 text-sm text-gray-900">$6,543</td>
                            <td className="px-4 py-3 text-sm text-gray-900">321</td>
                            <td className="px-4 py-3 text-sm text-gray-900">2.8%</td>
                            <td className="px-4 py-3 text-sm text-gray-900">3.5x</td>
                            <td className="px-4 py-3">
                              <Button size="sm" variant="outline" onClick={() => handleViewProductDetail('智能手表')}>
                                查看详情
                              </Button>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="ai-config" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">AI配置管理</h2>
                <Button onClick={() => {/* TODO: 保存配置 */}}>
                  <Brain className="h-4 w-4 mr-2" />
                  保存配置
                </Button>
              </div>

              <div className="grid gap-4">
                {/* 全局配置 */}
                <Card>
                  <CardHeader>
                    <CardTitle>全局AI配置</CardTitle>
                    <CardDescription>系统默认的AI服务配置</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <Label className="text-sm font-medium">视频分析AI</Label>
                        <Select defaultValue="gemini">
                          <SelectTrigger>
                            <SelectValue placeholder="选择AI服务" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gemini">Gemini</SelectItem>
                            <SelectItem value="gpt4">GPT-4</SelectItem>
                            <SelectItem value="claude">Claude</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label className="text-sm font-medium">Prompt生成AI</Label>
                        <Select defaultValue="gemini">
                          <SelectTrigger>
                            <SelectValue placeholder="选择AI服务" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gemini">Gemini</SelectItem>
                            <SelectItem value="gpt4">GPT-4</SelectItem>
                            <SelectItem value="claude">Claude</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label className="text-sm font-medium">视频生成AI</Label>
                        <Select defaultValue="sora">
                          <SelectTrigger>
                            <SelectValue placeholder="选择AI服务" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sora">Sora</SelectItem>
                            <SelectItem value="veo">Veo</SelectItem>
                            <SelectItem value="doubao">豆包</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* 模板AI配置 */}
                <Card>
                  <CardHeader>
                    <CardTitle>模板AI配置</CardTitle>
                    <CardDescription>为不同模板配置专用的AI服务，用于数据归因和优化</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="border rounded-lg">
                      <table className="w-full">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">模板名称</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">视频分析AI</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Prompt生成AI</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">视频生成AI</th>
                            <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">操作</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                          <tr>
                            <td className="px-4 py-3">
                              <div className="font-medium text-gray-900">科技感风格</div>
                              <div className="text-sm text-gray-500">电子产品</div>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="gemini">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="gemini">Gemini</SelectItem>
                                  <SelectItem value="gpt4">GPT-4</SelectItem>
                                  <SelectItem value="claude">Claude</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="gpt4">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="gemini">Gemini</SelectItem>
                                  <SelectItem value="gpt4">GPT-4</SelectItem>
                                  <SelectItem value="claude">Claude</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="sora">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="sora">Sora</SelectItem>
                                  <SelectItem value="veo">Veo</SelectItem>
                                  <SelectItem value="doubao">豆包</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Button size="sm" variant="outline">
                                保存
                              </Button>
                            </td>
                          </tr>
                          <tr>
                            <td className="px-4 py-3">
                              <div className="font-medium text-gray-900">时尚美妆风格</div>
                              <div className="text-sm text-gray-500">美妆护肤</div>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="claude">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="gemini">Gemini</SelectItem>
                                  <SelectItem value="gpt4">GPT-4</SelectItem>
                                  <SelectItem value="claude">Claude</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="claude">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="gemini">Gemini</SelectItem>
                                  <SelectItem value="gpt4">GPT-4</SelectItem>
                                  <SelectItem value="claude">Claude</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Select defaultValue="veo">
                                <SelectTrigger className="w-32">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="sora">Sora</SelectItem>
                                  <SelectItem value="veo">Veo</SelectItem>
                                  <SelectItem value="doubao">豆包</SelectItem>
                                </SelectContent>
                              </Select>
                            </td>
                            <td className="px-4 py-3">
                              <Button size="sm" variant="outline">
                                保存
                              </Button>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </CardContent>
                </Card>

                {/* 配置说明 */}
                <Card>
                  <CardHeader>
                    <CardTitle>配置说明</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2 text-sm text-gray-600">
                      <p><strong>全局配置：</strong>系统默认的AI服务配置，适用于所有模板</p>
                      <p><strong>模板配置：</strong>为特定模板配置专用的AI服务，用于：</p>
                      <ul className="ml-4 space-y-1">
                        <li>• 数据归因：分析不同AI组合的效果</li>
                        <li>• 性能优化：根据历史数据选择最佳AI组合</li>
                        <li>• 个性化匹配：不同风格适合不同的AI服务</li>
                      </ul>
                      <p><strong>未来目标：</strong>AI将根据商品信息自动选择最优的AI组合</p>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </div>

      {/* 批量上传模态框 */}
      {showBulkUpload && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-md mx-4">
            <CardHeader>
              <CardTitle>批量上传商品</CardTitle>
              <CardDescription>
                上传CSV文件批量导入商品数据
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="bulk-file">选择CSV文件</Label>
                <Input
                  id="bulk-file"
                  type="file"
                  accept=".csv"
                  onChange={(e) => setBulkUploadFile(e.target.files?.[0] || null)}
                  className="mt-2"
                />
                <p className="text-sm text-gray-500 mt-1">
                  支持CSV格式，包含商品名称、类目、卖点、目标国家等字段
                </p>
              </div>
              
              {bulkUploadFile && (
                <div className="p-3 bg-gray-50 rounded-lg">
                  <p className="text-sm">
                    <strong>已选择文件：</strong> {bulkUploadFile.name}
                  </p>
                  <p className="text-sm text-gray-600">
                    文件大小：{(bulkUploadFile.size / 1024).toFixed(1)} KB
                  </p>
                </div>
              )}

              <div className="flex justify-end space-x-2">
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setShowBulkUpload(false)
                    setBulkUploadFile(null)
                  }}
                >
                  取消
                </Button>
                <Button 
                  onClick={handleBulkUpload}
                  disabled={!bulkUploadFile || bulkUploading}
                >
                  {bulkUploading ? '上传中...' : '开始上传'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
