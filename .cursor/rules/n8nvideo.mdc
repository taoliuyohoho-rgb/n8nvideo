---
alwaysApply: true
---
# 项目规则（Project Rules）

适用于 `n8nvideo` 项目的通用工程规则，结合现有架构与我们既有共识，覆盖架构、编码、API、AI 选择、数据、测试与发布。

## 1. 架构与模块化
- 目录约定：
  - 前端页面与组件：`app/**`, `components/**`
  - 服务与业务逻辑：`src/**`
  - 接口：`app/api/**`
  - AI：`src/services/ai/**`
  - 数据库与模型：`prisma/**`
  - 文档：`docs/**`
- 模块边界：公共类型与接口集中导出；禁止跨层直接依赖内部实现。
- 事件与解耦：优先通过明确 API/服务调用解耦，避免隐式全局状态。

## 2. 编码规范

### TypeScript 类型安全
- **禁止使用 `as any`**：必须定义具体类型，使用类型守卫或联合类型
- **类型优先开发**：先定义接口和类型，再实现功能
- **完整类型标注**：所有导出 API、组件 props、函数参数需完整类型
- **类型定义集中管理**：在 `types/` 目录统一管理项目类型

### 常见类型错误修复
```typescript
// ❌ 错误：使用 any 类型
const status = searchParams.get('status') as any

// ✅ 正确：定义具体类型
type MappingStatus = 'pending' | 'confirmed' | 'rejected'
const status = searchParams.get('status') as MappingStatus

// ✅ 更好：使用类型守卫
function isValidStatus(status: string): status is MappingStatus {
  return ['pending', 'confirmed', 'rejected'].includes(status)
}
```

### 类型定义规范
- **接口属性**：避免 `any`，使用具体类型或 `Record<string, unknown>`
- **可选属性**：使用 `?` 标记，配合空值检查 `?.` 和 `??`
- **数组类型**：明确元素类型，避免 `any[]`
- **表单数据**：字符串与数组转换需显式处理

### 控制流与错误处理
- 使用早返回，避免深嵌套
- 禁用无意义 try/catch
- 类型安全的错误处理

### 注释与格式
- 只保留关键信息（不显然的约束、边界、性能/安全注意事项）
- 遵循仓库现有格式与缩进，不做无关重排

## 3. API 设计
- 输入校验与错误：所有 `app/api/**` 路由需校验输入，定义稳定错误码与消息；避免泄露内部堆栈。
- 版本与变更：破坏性变更需在文档与客户端同步更新；提供兼容期或迁移说明。
- 限流与幂等：长耗时/重复请求场景使用 `idempotencyKey`；对外暴露接口按需限流与分页。

## 4. AI 选择与调用
- 模型路由：统一经 `src/services/ai/rules.ts` → `callModel/chooseModel`；
  - 视觉/视频理解优先豆包，其次 DeepSeek/Gemini；
  - 文本默认 Gemini，可按环境变量覆盖；
  - 视频生成走专用入口（非文本执行器）。
- JSON 严格输出：通过 `contract.callWithSchema` 强制 Schema；失败走一次自动修复；仍失败则返回可诊断错误。
- 证据约束：业务 Prompt 使用 `evidenceMode` 注入证据；缺证据时输出空结构，不得臆造。
- 验证与可用性：
  - 仅使用 `verified-models.json` 已验证的 Provider；
  - 断路器/重试：复用 `AiExecutor` 的重试与断路器策略；
  - 降级：缺少 vision/search 能力时提供明确降级与提示。

## 5. 数据与迁移
- Prisma Schema 改动：
  - 保持字段命名稳定，必要时新增字段+迁移脚本；
  - 添加索引/唯一约束以满足查询与一致性；
  - 变更同步 `seed.ts` 与文档。
- 数据完整性：服务端进行约束与防御式编程；外键删除策略显式声明。

## 6. 测试与质量

### TypeScript 质量检查
- **编译检查**：`npx tsc --noEmit` 无错误
- **ESLint 检查**：`npm run lint` 通过，禁止 `@typescript-eslint/no-explicit-any`
- **类型覆盖率**：关键模块类型覆盖率 > 90%
- **类型安全**：运行时类型检查，避免类型断言错误

### 开发自测覆盖
- 正常流+异常流；接口、AI 输出校验、数据库读写
- 类型转换测试：表单数据 ↔ API 数据格式
- 边界条件测试：空值、undefined、类型不匹配

### 工具与脚本
- 提供最小复现实例与样例请求；新增/变更 API 附带示例
- 类型生成：`npx prisma generate` 同步数据库类型
- 类型检查脚本：`npm run type-check`

### 观测性
- 关键操作日志包含 requestId、userId、模块与耗时
- 错误信息可诊断、不可泄密
- TypeScript 错误日志包含具体类型信息

## 7. 安全与合规
- 秘钥管理：仅从环境变量读取；不入库、不写入日志。
- 输入安全：防注入、XSS 与路径遍历；对外 URL/文件名白名单。
- 权限：管理端接口需鉴权与审计；默认最小权限。

## 8. 构建与部署
- 配置来源：优先 `ai-config.json` 与环境变量；提供默认值；配置变更可回滚。
- 构建：`next build` 成功且无类型错误；Docker 镜像遵循现有 Dockerfile。
- 运行：`nginx.conf` 反向代理保持简单稳定；健康检查 `/api/health` 可用。

## 9. 文档与变更管理
- 所有影响接口/数据/配置的改动需更新 `docs/**` 与 `README.md` 链接。
- 为每个新模块添加简介与使用说明；为核心流程提供端到端示例。

---

附：执行清单（提交前）

### TypeScript 质量检查
- [ ] `npx tsc --noEmit` 无编译错误
- [ ] `npm run lint` 通过，无 `any` 类型使用
- [ ] 所有 `as any` 已替换为具体类型或类型守卫
- [ ] 新增接口/类型已添加到 `types/` 目录
- [ ] 表单数据与 API 数据格式转换正确

### 功能与集成
- [ ] 代码无 ESLint/TS 错误，关键流程跑通
- [ ] API 具备校验、错误码、示例
- [ ] AI 调用可用，模型已验证，可降级
- [ ] 数据模型变化已迁移并文档化
- [ ] 配置项有默认值与回滚策略

### 类型安全验证
- [ ] 运行时类型检查通过
- [ ] 边界条件测试（空值、undefined）
- [ ] 类型转换测试（字符串 ↔ 数组）
- [ ] 可选属性正确处理（`?.` 和 `??`）